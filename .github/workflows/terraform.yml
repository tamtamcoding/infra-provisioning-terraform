name: Terraform Deploy

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: aws
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set AWS credentials
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

    # - name: Check if S3 bucket exists and create if not
    #   id: check_s3_bucket
    #   run: |
    #     if ! aws s3api head-bucket --bucket "tamtamcoding110824" 2>/dev/null; then
    #       echo "S3 bucket does not exist. Creating bucket..."
    #       aws s3api create-bucket --bucket "tamtamcoding110824" --region us-east-1
    #       echo "Bucket created. Waiting for 60 seconds to ensure consistency..."
    #       sleep 60
    #     else
    #       echo "S3 bucket exists."
    #     fi

    # - name: Check if DynamoDB table exists
    #   id: check_dynamodb_table
    #   run: |
    #     table_exists=$(aws dynamodb describe-table --table-name "terraform-lock" 2>/dev/null)
    #     if [ $? -ne 0 ]; then
    #       echo "DynamoDB table does not exist. Creating table..."
    #       create_table_response=$(aws dynamodb create-table \
    #         --table-name "terraform-lock" \
    #         --attribute-definitions AttributeName=LockID,AttributeType=S \
    #         --key-schema AttributeName=LockID,KeyType=HASH \
    #         --billing-mode PAY_PER_REQUEST \
    #         --region $AWS_DEFAULT_REGION 2>&1)
    #       echo "Create table response: $create_table_response"
          
    #       if [ $? -eq 0 ]; then
    #         echo "Table created successfully. Waiting for 60 seconds to ensure consistency..."
    #         sleep 60
    #       else
    #         echo "Failed to create DynamoDB table."
    #         exit 1
    #       fi
    #     else
    #       echo "DynamoDB table exists."
    #     fi

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0

    - name: Initialize Terraform
      run: terraform init

    - name: Plan Terraform changes
      run: terraform plan -out=tfplan

    - name: Apply Terraform changes
      run: terraform apply --auto-approve

    - name: Clean up
      run: rm tfplan